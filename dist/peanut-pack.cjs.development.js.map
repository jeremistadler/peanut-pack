{"version":3,"file":"peanut-pack.cjs.development.js","sources":["../src/runLengthEncodeBitMap.ts","../src/calcNumberPrecision.ts","../src/calculateStats.ts","../src/runLengthEncode.ts","../src/deltaEncode.ts","../src/compresser.ts","../src/runLengthDecodeGenerator.ts","../src/runLengthDecode.ts","../src/Header.ts","../src/deltaDecode.ts","../src/decompressGenerator.ts"],"sourcesContent":["export const IS_REPEATED_RANGE = /*   */ 0b000_000_01\nexport const IS_FLOAT = /*            */ 0b000_000_10\n\nexport const ITEM_RANGE_MASK = /*     */ 0b000_111_00\nexport const IS_ZERO_ITEM_RANGE = /*  */ 0b000_000_00\nexport const IS_ONE_ITEM_RANGE = /*   */ 0b000_001_00\nexport const IS_TWO_ITEM_RANGE = /*   */ 0b000_010_00\nexport const IS_8_BIT_ITEM_RANGE = /* */ 0b000_011_00\nexport const IS_16_BIT_ITEM_RANGE = /**/ 0b000_110_00\nexport const IS_32_BIT_ITEM_RANGE = /**/ 0b000_101_00\n\nexport const IS_8_BIT_VALUES = /*     */ 0b000_000_00\nexport const IS_16_BIT_VALUES = /*    */ 0b001_000_00\nexport const IS_32_BIT_VALUES = /*    */ 0b011_000_00\nexport const IS_32_BIT_FLOAT = /*     */ 0b101_000_10\nexport const IS_64_BIT_FLOAT = /*     */ 0b111_000_10\n\n//\n//\n\nexport const TRANSFORM_DELTA = /*      */ 0b00_00_01_00\nexport const TRANSFORM_DELTA_DELTA = /**/ 0b00_00_10_00\nexport const TRANSFORM_RLE = /*        */ 0b00_00_00_01\nexport const TRANSFORM_STRING = /*     */ 0b10_00_00_00\n","export function calcNumberPrecision(a: number) {\n  if (!isFinite(a)) return 0\n  var e = 1,\n    p = 0\n  while (Math.round(a * e) / e !== a) {\n    e *= 10\n    p++\n  }\n  return p\n}\n","import { calcNumberPrecision } from './calcNumberPrecision'\nimport percentile from 'percentile'\n\nexport function calculateStats(values: number[]) {\n  const unique = new Set(values).size\n  let min = values[0]\n  let max = values[0]\n  let maxDecimals = 0\n\n  const [p02, p05, p50, p95, p98] = percentile(\n    [2, 5, 50, 95, 98],\n    values\n  ) as number[]\n\n  for (let i = 0; i < values.length; i++) {\n    const element = values[i]\n    min = Math.min(min, element)\n    max = Math.max(max, element)\n    maxDecimals = Math.max(maxDecimals, calcNumberPrecision(element))\n  }\n\n  return {\n    unique,\n    min,\n    max,\n    count: values.length,\n    maxDecimals,\n    p02,\n    p05,\n    p50,\n    p95,\n    p98,\n  }\n}\n","import { IndexableArray } from './IndexableArray'\nimport {\n  IS_REPEATED_RANGE,\n  IS_ONE_ITEM_RANGE,\n  IS_TWO_ITEM_RANGE,\n  IS_32_BIT_VALUES,\n  IS_16_BIT_VALUES,\n  IS_32_BIT_ITEM_RANGE,\n  IS_16_BIT_ITEM_RANGE,\n  IS_8_BIT_ITEM_RANGE,\n  IS_32_BIT_FLOAT,\n  IS_64_BIT_FLOAT,\n  IS_8_BIT_VALUES,\n} from './runLengthEncodeBitMap'\n\nfunction appendSingleItems(\n  values: IndexableArray,\n  startIndex: number,\n  endIndexInclusive: number,\n  valueSize: 162 | 226 | 0 | 32 | 96,\n): Buffer {\n  const itemCount = endIndexInclusive - startIndex + 1\n  let countBitSize = 0 // itemCount >= 65536 ? 4 : itemCount >= 255 ? 2 : 1\n\n  let flags = valueSize\n  if (itemCount === 1) flags |= IS_ONE_ITEM_RANGE\n  else if (itemCount === 2) flags |= IS_TWO_ITEM_RANGE\n  else if (itemCount < 256) {\n    flags |= IS_8_BIT_ITEM_RANGE\n    countBitSize = 1\n  } else if (itemCount < 65536) {\n    flags |= IS_16_BIT_ITEM_RANGE\n    countBitSize = 2\n  } else {\n    flags |= IS_32_BIT_ITEM_RANGE\n    countBitSize = 4\n  }\n\n  const buff = Buffer.allocUnsafe(\n    countBitSize + valueSizeToBitSize(valueSize) * itemCount + 1,\n  )\n  buff.writeUint8(flags, 0)\n\n  if (countBitSize === 1) buff.writeUInt8(itemCount, 1)\n  else if (countBitSize === 2) buff.writeUInt16LE(itemCount, 1)\n  else if (countBitSize === 4) buff.writeUInt32LE(itemCount, 1)\n\n  let offset = 1 + countBitSize\n\n  if (valueSize === IS_8_BIT_VALUES) {\n    for (let i = startIndex; i <= endIndexInclusive; i++) {\n      buff.writeInt8(values[i], offset)\n      offset += 1\n    }\n  } else if (valueSize === IS_16_BIT_VALUES) {\n    for (let i = startIndex; i <= endIndexInclusive; i++) {\n      buff.writeInt16LE(values[i], offset)\n      offset += 2\n    }\n  } else if (valueSize === IS_32_BIT_VALUES) {\n    for (let i = startIndex; i <= endIndexInclusive; i++) {\n      buff.writeInt32LE(values[i], offset)\n      offset += 4\n    }\n  } else if (valueSize === IS_32_BIT_FLOAT) {\n    for (let i = startIndex; i <= endIndexInclusive; i++) {\n      buff.writeFloatLE(values[i], offset)\n      offset += 4\n    }\n  } else if (valueSize === IS_64_BIT_FLOAT) {\n    for (let i = startIndex; i <= endIndexInclusive; i++) {\n      buff.writeDoubleLE(values[i], offset)\n      offset += 8\n    }\n  } else {\n    throw new Error(\n      'Unsupported flags in appendSingleItems ' + flags.toString(2),\n    )\n  }\n  return buff\n}\n\nfunction appendRepeatedItems(value: number, itemCount: number) {\n  const valueSize = calculateValueSizeFlag(value)\n  const sizeBit = calculateUnsignedBitSize(itemCount)\n\n  let flags = valueSize | IS_REPEATED_RANGE\n  if (itemCount === 1) flags |= IS_ONE_ITEM_RANGE\n  else if (itemCount === 2) flags |= IS_TWO_ITEM_RANGE\n  else if (sizeBit === 1) flags |= IS_8_BIT_ITEM_RANGE\n  else if (sizeBit === 2) flags |= IS_16_BIT_ITEM_RANGE\n  else if (sizeBit === 4) flags |= IS_32_BIT_ITEM_RANGE\n\n  const buff = Buffer.allocUnsafe(sizeBit + valueSizeToBitSize(valueSize) + 1)\n  buff.writeUint8(flags)\n  let offset = 1 + sizeBit\n\n  if (sizeBit === 1) buff.writeUInt8(itemCount, 1)\n  else if (sizeBit === 2) buff.writeUInt16LE(itemCount, 1)\n  else if (sizeBit === 4) buff.writeUInt32LE(itemCount, 1)\n\n  if (valueSize === IS_8_BIT_VALUES) {\n    buff.writeInt8(value, offset)\n    offset += 1\n  } else if (valueSize === IS_16_BIT_VALUES) {\n    buff.writeInt16LE(value, offset)\n    offset += 2\n  } else if (valueSize === IS_32_BIT_VALUES) {\n    buff.writeInt32LE(value, offset)\n    offset += 4\n  } else if (valueSize === IS_32_BIT_FLOAT) {\n    buff.writeFloatLE(value, offset)\n    offset += 4\n  } else if (valueSize === IS_64_BIT_FLOAT) {\n    buff.writeFloatLE(value, offset)\n    offset += 8\n  } else {\n    throw new Error(\n      'Unsupported flags in appendRepeatedItems ' + flags.toString(2),\n    )\n  }\n  return buff\n}\n\nexport function runLengthEncode(values: IndexableArray): Uint8Array {\n  const buffers: Buffer[] = []\n\n  if (values.length === 0) return new Uint8Array(0)\n  // if (values.length === 1) return [1, values[0]]\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i]\n\n    if (i === values.length - 1) {\n      buffers.push(\n        appendSingleItems(values, i, i, calculateValueSizeFlag(value)),\n      )\n      break\n    }\n\n    const isNextSame = values[i + 1] === value\n\n    if (isNextSame) {\n      const rangeStartIndex = i\n      while (i < values.length && values[i + 1] === value) i++\n      buffers.push(appendRepeatedItems(value, i - rangeStartIndex + 1))\n    } else {\n      const bitSizeFlag = calculateValueSizeFlag(value)\n      const rangeStartIndex = i\n      while (\n        i < values.length - 1 &&\n        values[i + 1] !== values[i] &&\n        calculateValueSizeFlag(values[i + 1]) === bitSizeFlag\n      )\n        i++\n      buffers.push(appendSingleItems(values, rangeStartIndex, i, bitSizeFlag))\n    }\n  }\n\n  const concated = Buffer.concat(buffers)\n  return new Uint8Array(\n    concated.buffer,\n    concated.byteOffset,\n    concated.byteLength,\n  )\n}\n\n// function findSubsetIndex(needleIndex: number, values: IndexableArray) {\n//   if (needleIndex + 8 >= values.length - 1) return -1\n\n//   const n0 = values[needleIndex + 0]\n//   const n1 = values[needleIndex + 1]\n//   const n2 = values[needleIndex + 2]\n//   const n3 = values[needleIndex + 3]\n//   const n4 = values[needleIndex + 4]\n//   const n5 = values[needleIndex + 5]\n//   const n6 = values[needleIndex + 6]\n//   const n7 = values[needleIndex + 7]\n\n//   for (let s = Math.max(0, needleIndex - 255); s < needleIndex - 8; s++) {\n//     if (\n//       n0 === values[s + 0] &&\n//       n1 === values[s + 1] &&\n//       n2 === values[s + 2] &&\n//       n3 === values[s + 3] &&\n//       n4 === values[s + 4] &&\n//       n5 === values[s + 5] &&\n//       n6 === values[s + 6] &&\n//       n7 === values[s + 7]\n//     )\n//       return s\n//   }\n\n//   return -1\n// }\n\nfunction valueSizeToBitSize(valueSize: 162 | 226 | 0 | 32 | 96) {\n  switch (valueSize) {\n    case 162:\n      return 4 // IS_32_BIT_FLOAT\n    case 226:\n      return 8 // IS_64_BIT_FLOAT\n    case 0:\n      return 1 // IS_8_BIT_VALUES\n    case 32:\n      return 2 // IS_16_BIT_VALUES\n    case 96:\n      return 4 // IS_32_BIT_VALUES\n  }\n}\n\nfunction calculateValueSizeFlag(value: number): 162 | 226 | 0 | 32 | 96 {\n  if (value < -0x80000000 || value > 0x7fffffff || (value | 0) !== value) {\n    if (Math.abs(Math.fround(value) - value) < 0.00001) return IS_32_BIT_FLOAT\n    return IS_64_BIT_FLOAT\n  }\n\n  if (value >= -127 && value <= 127) return IS_8_BIT_VALUES\n  if (value >= -32767 && value <= 32767) return IS_16_BIT_VALUES\n  return IS_32_BIT_VALUES\n}\n\nfunction calculateUnsignedBitSize(value: number): 0 | 1 | 2 | 4 {\n  if (value <= 2) return 0\n  if (value <= 255) return 1\n  if (value <= 65536) return 2\n  return 4\n}\n","import { IndexableArray } from './IndexableArray'\n\nexport function deltaEncode(values: IndexableArray) {\n  const result: number[] = []\n  let lastValue = 0\n  for (let i = 0; i < values.length; i++) {\n    const element = values[i]\n    const delta = element - lastValue\n    lastValue = element\n    result.push(delta)\n  }\n\n  return result\n}\n","import {\n  TRANSFORM_DELTA,\n  TRANSFORM_DELTA_DELTA,\n  TRANSFORM_RLE,\n} from './runLengthEncodeBitMap'\nimport { calculateStats } from './calculateStats'\nimport { runLengthEncode } from './runLengthEncode'\nimport {\n  AnyInputSerie,\n  InputNumberSerie,\n  InputStringSerie,\n  TransformType,\n} from './types'\nimport { deltaEncode } from './deltaEncode'\n\nexport function compressSerie(serie: AnyInputSerie): Uint8Array {\n  switch (serie.type) {\n    case 'number':\n      return compressNumberSerie(serie)\n    case 'string':\n      return compressStringSerie(serie)\n  }\n}\n\nfunction findSmallest(values: number[]) {\n  const deltaValues = deltaEncode(values)\n  const deltaRle = runLengthEncode(deltaValues)\n\n  const delta2Values = deltaEncode(deltaValues)\n  const delta2Rle = runLengthEncode(delta2Values)\n\n  const rle = runLengthEncode(values)\n\n  if (delta2Rle.length < deltaRle.length && delta2Rle.length < rle.length) {\n    return {\n      data: delta2Rle,\n      transforms: TRANSFORM_DELTA_DELTA | TRANSFORM_RLE,\n    }\n  }\n\n  if (deltaRle.length < rle.length) {\n    return {\n      data: deltaRle,\n      transforms: TRANSFORM_DELTA | TRANSFORM_RLE,\n    }\n  }\n\n  return {\n    data: rle,\n    transforms: TRANSFORM_RLE,\n  }\n}\n\nfunction compressNumberSerie(serie: InputNumberSerie): Uint8Array {\n  const stats = calculateStats(serie.values)\n\n  const valueOffset = stats.p50 > 1 ? Math.floor(stats.p50) : 0\n  let offseted = serie.values\n  if (valueOffset > 0) {\n    offseted = serie.values.map(f => f - valueOffset)\n  }\n\n  const smallest = findSmallest(offseted)\n\n  const headerData = runLengthEncode([\n    smallest.transforms,\n    valueOffset,\n    stats.count,\n    stats.unique,\n    stats.maxDecimals,\n    stats.min,\n    stats.p02,\n    stats.p05,\n    stats.p50,\n    stats.p95,\n    stats.p98,\n    stats.max,\n  ])\n\n  const final = new Uint8Array(headerData.length + 1 + smallest.data.length)\n  final[0] = headerData.length\n  final.set(headerData, 1)\n  final.set(smallest.data, 1 + headerData.length)\n\n  return final\n}\n\nexport const transformTypes: ReadonlyArray<TransformType> = [\n  'delta',\n  'rle',\n  'dictionary',\n]\n\nfunction compressStringSerie(_serie: InputStringSerie): Uint8Array {\n  throw new Error('Function not implemented.')\n}\n","import {\n  IS_REPEATED_RANGE,\n  IS_ONE_ITEM_RANGE,\n  IS_TWO_ITEM_RANGE,\n  IS_32_BIT_ITEM_RANGE,\n  IS_16_BIT_ITEM_RANGE,\n  IS_32_BIT_VALUES,\n  IS_16_BIT_VALUES,\n  IS_8_BIT_ITEM_RANGE,\n  ITEM_RANGE_MASK,\n  IS_32_BIT_FLOAT,\n  IS_64_BIT_FLOAT,\n} from './runLengthEncodeBitMap'\n\nconst float32Array = new Float32Array(1)\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer)\nconst float64Array = new Float64Array(1)\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer)\n\nexport function* runLengthDecodeGenerator(\n  values: Uint8Array,\n  startOffset: number,\n  endIndex: number\n): Generator<number, void, void> {\n  let offset = startOffset\n\n  while (offset < endIndex) {\n    const flag = values[offset]\n    offset++\n\n    const countBits = flag & ITEM_RANGE_MASK\n    let itemCount = 0\n\n    if (countBits === IS_TWO_ITEM_RANGE) itemCount = 2\n    else if (countBits === IS_ONE_ITEM_RANGE) itemCount = 1\n    else if (countBits === IS_8_BIT_ITEM_RANGE) {\n      itemCount = values[offset]\n      offset++\n    } else if (countBits === IS_16_BIT_ITEM_RANGE) {\n      itemCount = values[offset] | (values[offset + 1] << 8)\n      offset += 2\n    } else if (countBits === IS_32_BIT_ITEM_RANGE) {\n      itemCount =\n        (values[offset] |\n          (values[offset + 1] << 8) |\n          (values[offset + 2] << 16) |\n          (values[offset + 3] << 24)) >>>\n        0\n      offset += 4\n    } else if (flag === 0) {\n      // Handle zero fills at end of data\n      break\n    }\n\n    if (flag & IS_REPEATED_RANGE) {\n      if (flag >= IS_64_BIT_FLOAT) {\n        uInt8Float64Array[0] = values[offset]\n        uInt8Float64Array[1] = values[offset + 1]\n        uInt8Float64Array[2] = values[offset + 2]\n        uInt8Float64Array[3] = values[offset + 3]\n        uInt8Float64Array[4] = values[offset + 4]\n        uInt8Float64Array[5] = values[offset + 5]\n        uInt8Float64Array[6] = values[offset + 6]\n        uInt8Float64Array[7] = values[offset + 7]\n        offset += 8\n        const value = float64Array[0]\n        for (let i = 0; i < itemCount; i++) yield value\n      } else if (flag >= IS_32_BIT_FLOAT) {\n        uInt8Float32Array[0] = values[offset]\n        uInt8Float32Array[1] = values[offset + 1]\n        uInt8Float32Array[2] = values[offset + 2]\n        uInt8Float32Array[3] = values[offset + 3]\n        offset += 4\n        const value = float32Array[0]\n        for (let i = 0; i < itemCount; i++) yield value\n      } else if (flag >= IS_32_BIT_VALUES) {\n        const value =\n          values[offset] +\n          values[offset + 1] * 2 ** 8 +\n          values[offset + 2] * 2 ** 16 +\n          (values[offset + 3] << 24)\n        offset += 4\n\n        for (let i = 0; i < itemCount; i++) yield value\n      } else if (flag >= IS_16_BIT_VALUES) {\n        const val = values[offset] + values[offset + 1] * 2 ** 8\n        const value = val | ((val & (2 ** 15)) * 0x1fffe)\n        offset += 2\n\n        for (let i = 0; i < itemCount; i++) {\n          yield value\n        }\n      } else {\n        const val = values[offset]\n        const v2 = val | ((val & (2 ** 7)) * 0x1fffffe)\n        offset++\n\n        for (let i = 0; i < itemCount; i++) {\n          yield v2\n        }\n      }\n    } else {\n      if (flag >= IS_64_BIT_FLOAT) {\n        for (let i = 0; i < itemCount; i++) {\n          uInt8Float64Array[0] = values[offset]\n          uInt8Float64Array[1] = values[offset + 1]\n          uInt8Float64Array[2] = values[offset + 2]\n          uInt8Float64Array[3] = values[offset + 3]\n          uInt8Float64Array[4] = values[offset + 4]\n          uInt8Float64Array[5] = values[offset + 5]\n          uInt8Float64Array[6] = values[offset + 6]\n          uInt8Float64Array[7] = values[offset + 7]\n          yield float64Array[0]\n          offset += 8\n        }\n      } else if (flag >= IS_32_BIT_FLOAT) {\n        for (let i = 0; i < itemCount; i++) {\n          uInt8Float32Array[0] = values[offset]\n          uInt8Float32Array[1] = values[offset + 1]\n          uInt8Float32Array[2] = values[offset + 2]\n          uInt8Float32Array[3] = values[offset + 3]\n          yield float32Array[0]\n          offset += 4\n        }\n      } else if (flag >= IS_32_BIT_VALUES) {\n        for (let i = 0; i < itemCount; i++) {\n          yield values[offset] +\n            values[offset + 1] * 2 ** 8 +\n            values[offset + 2] * 2 ** 16 +\n            (values[offset + 3] << 24)\n          offset += 4\n        }\n      } else if (flag >= IS_16_BIT_VALUES) {\n        for (let i = 0; i < itemCount; i++) {\n          const val = values[offset] + values[offset + 1] * 2 ** 8\n          yield val | ((val & (2 ** 15)) * 0x1fffe)\n          offset += 2\n        }\n      } else {\n        for (let i = 0; i < itemCount; i++) {\n          const val = values[offset]\n          yield val | ((val & (2 ** 7)) * 0x1fffffe)\n          offset++\n        }\n      }\n    }\n  }\n}\n","import {\n  IS_REPEATED_RANGE,\n  IS_ONE_ITEM_RANGE,\n  IS_TWO_ITEM_RANGE,\n  IS_32_BIT_ITEM_RANGE,\n  IS_16_BIT_ITEM_RANGE,\n  IS_32_BIT_VALUES,\n  IS_16_BIT_VALUES,\n  IS_8_BIT_ITEM_RANGE,\n  ITEM_RANGE_MASK,\n  IS_32_BIT_FLOAT,\n  IS_64_BIT_FLOAT,\n} from './runLengthEncodeBitMap'\n\nconst float32Array = new Float32Array(1)\nconst uInt8Float32Array = new Uint8Array(float32Array.buffer)\nconst float64Array = new Float64Array(1)\nconst uInt8Float64Array = new Uint8Array(float64Array.buffer)\n\nexport function runLengthDecode(\n  values: Uint8Array,\n  startOffset: number,\n  endIndex: number\n): number[] {\n  const result: number[] = []\n  let offset = startOffset\n\n  const appendSingleItems = (flag: number, itemCount: number) => {\n    if (flag >= IS_64_BIT_FLOAT) {\n      for (let i = 0; i < itemCount; i++) {\n        uInt8Float64Array[0] = values[offset]\n        uInt8Float64Array[1] = values[offset + 1]\n        uInt8Float64Array[2] = values[offset + 2]\n        uInt8Float64Array[3] = values[offset + 3]\n        uInt8Float64Array[4] = values[offset + 4]\n        uInt8Float64Array[5] = values[offset + 5]\n        uInt8Float64Array[6] = values[offset + 6]\n        uInt8Float64Array[7] = values[offset + 7]\n        result.push(float64Array[0])\n        offset += 8\n      }\n    } else if (flag >= IS_32_BIT_FLOAT) {\n      for (let i = 0; i < itemCount; i++) {\n        uInt8Float32Array[0] = values[offset]\n        uInt8Float32Array[1] = values[offset + 1]\n        uInt8Float32Array[2] = values[offset + 2]\n        uInt8Float32Array[3] = values[offset + 3]\n        result.push(float32Array[0])\n        offset += 4\n      }\n    } else if (flag >= IS_32_BIT_VALUES) {\n      for (let i = 0; i < itemCount; i++) {\n        result.push(\n          values[offset] +\n            values[offset + 1] * 2 ** 8 +\n            values[offset + 2] * 2 ** 16 +\n            (values[offset + 3] << 24)\n        )\n        offset += 4\n      }\n    } else if (flag >= IS_16_BIT_VALUES) {\n      for (let i = 0; i < itemCount; i++) {\n        const val = values[offset] + values[offset + 1] * 2 ** 8\n        result.push(val | ((val & (2 ** 15)) * 0x1fffe))\n        offset += 2\n      }\n    } else {\n      for (let i = 0; i < itemCount; i++) {\n        const val = values[offset]\n        result.push(val | ((val & (2 ** 7)) * 0x1fffffe))\n        offset++\n      }\n    }\n  }\n\n  const appendRepeatedItems = (flag: number, itemCount: number) => {\n    if (flag >= IS_64_BIT_FLOAT) {\n      uInt8Float64Array[0] = values[offset]\n      uInt8Float64Array[1] = values[offset + 1]\n      uInt8Float64Array[2] = values[offset + 2]\n      uInt8Float64Array[3] = values[offset + 3]\n      uInt8Float64Array[4] = values[offset + 4]\n      uInt8Float64Array[5] = values[offset + 5]\n      uInt8Float64Array[6] = values[offset + 6]\n      uInt8Float64Array[7] = values[offset + 7]\n      offset += 8\n      const value = float64Array[0]\n      for (let i = 0; i < itemCount; i++) result.push(value)\n    } else if (flag >= IS_32_BIT_FLOAT) {\n      uInt8Float32Array[0] = values[offset]\n      uInt8Float32Array[1] = values[offset + 1]\n      uInt8Float32Array[2] = values[offset + 2]\n      uInt8Float32Array[3] = values[offset + 3]\n      offset += 4\n      const value = float32Array[0]\n      for (let i = 0; i < itemCount; i++) result.push(value)\n    } else if (flag >= IS_32_BIT_VALUES) {\n      const value =\n        values[offset] +\n        values[offset + 1] * 2 ** 8 +\n        values[offset + 2] * 2 ** 16 +\n        (values[offset + 3] << 24)\n      offset += 4\n\n      for (let i = 0; i < itemCount; i++) result.push(value)\n    } else if (flag >= IS_16_BIT_VALUES) {\n      const val = values[offset] + values[offset + 1] * 2 ** 8\n      const value = val | ((val & (2 ** 15)) * 0x1fffe)\n      offset += 2\n\n      for (let i = 0; i < itemCount; i++) {\n        result.push(value)\n      }\n    } else {\n      const val = values[offset]\n      const v2 = val | ((val & (2 ** 7)) * 0x1fffffe)\n      offset++\n\n      for (let i = 0; i < itemCount; i++) {\n        result.push(v2)\n      }\n    }\n  }\n\n  while (offset < endIndex) {\n    const flag = values[offset]\n    offset++\n\n    const countBits = flag & ITEM_RANGE_MASK\n    let itemCount = 0\n\n    if (countBits === IS_TWO_ITEM_RANGE) itemCount = 2\n    else if (countBits === IS_ONE_ITEM_RANGE) itemCount = 1\n    else if (countBits === IS_8_BIT_ITEM_RANGE) {\n      itemCount = values[offset]\n      offset++\n    } else if (countBits === IS_16_BIT_ITEM_RANGE) {\n      itemCount = values[offset] | (values[offset + 1] << 8)\n      offset += 2\n    } else if (countBits === IS_32_BIT_ITEM_RANGE) {\n      itemCount =\n        (values[offset] |\n          (values[offset + 1] << 8) |\n          (values[offset + 2] << 16) |\n          (values[offset + 3] << 24)) >>>\n        0\n      offset += 4\n    } else if (flag === 0) {\n      // Handle zero fills at end of data\n      break\n    }\n\n    if (flag & IS_REPEATED_RANGE) {\n      appendRepeatedItems(flag, itemCount)\n    } else {\n      appendSingleItems(flag, itemCount)\n    }\n  }\n\n  return result\n}\n","import { runLengthDecode } from './runLengthDecode'\n\nexport type Header = ReturnType<typeof readHeader>\nexport function readHeader(rawData: Uint8Array) {\n  const headerSize = rawData[0]\n  const [\n    flags,\n    valueOffset,\n    count,\n    unique,\n    maxDecimals,\n    min,\n    p02,\n    p05,\n    p50,\n    p95,\n    p98,\n    max,\n  ] = runLengthDecode(rawData, 1, headerSize + 1)\n\n  return {\n    valueOffset,\n    headerSize,\n    flags,\n    count,\n    unique,\n    maxDecimals,\n    min,\n    max,\n    p02,\n    p05,\n    p50,\n    p95,\n    p98,\n  }\n}\n","export function deltaDecode(data: number[]): number[] {\n  const result: number[] = []\n  let lastValue = 0\n  for (let i = 0; i < data.length; i++) {\n    const element = data[i]\n    const delta = element + lastValue\n    lastValue = delta\n    result.push(delta)\n  }\n\n  return result\n}\n\nexport function deltaDecodeGenerator() {\n  let lastValue = 0\n\n  return (val: number) => {\n    lastValue = val + lastValue\n    return lastValue\n  }\n}\n","import { runLengthDecodeGenerator } from './runLengthDecodeGenerator'\nimport { Header, readHeader } from './Header'\nimport {\n  TRANSFORM_DELTA,\n  TRANSFORM_DELTA_DELTA,\n  TRANSFORM_STRING,\n} from './runLengthEncodeBitMap'\nimport { deltaDecodeGenerator } from './deltaDecode'\n\nexport function decompressSerieGenerator(serie: Uint8Array) {\n  const header = readHeader(serie)\n\n  return {\n    stats: header,\n    values:\n      header.flags & TRANSFORM_STRING\n        ? decompressStringSerie(serie)\n        : decompressNumberSerieGenerator(serie, header),\n  }\n}\n\nfunction* decompressNumberSerieGenerator(\n  serie: Uint8Array,\n  header: Header,\n): Generator<number, void, void> {\n  let values = runLengthDecodeGenerator(\n    serie,\n    header.headerSize + 1,\n    serie.length,\n  )\n\n  const delta1 =\n    (header.flags & TRANSFORM_DELTA) === TRANSFORM_DELTA\n      ? deltaDecodeGenerator()\n      : null\n  const delta2 =\n    (header.flags & TRANSFORM_DELTA_DELTA) === TRANSFORM_DELTA_DELTA\n      ? deltaDecodeGenerator()\n      : null\n\n  for (const value of values) {\n    let val = value\n\n    if (delta1 !== null) val = delta1(val)\n    if (delta2 !== null) val = delta2(val)\n\n    yield val + header.valueOffset\n  }\n}\n\nfunction* decompressStringSerie(\n  _serie: Uint8Array,\n): Generator<string, void, void> {\n  throw new Error('Function not implemented.')\n}\n"],"names":["IS_REPEATED_RANGE","ITEM_RANGE_MASK","IS_ONE_ITEM_RANGE","IS_TWO_ITEM_RANGE","IS_8_BIT_ITEM_RANGE","IS_16_BIT_ITEM_RANGE","IS_32_BIT_ITEM_RANGE","IS_8_BIT_VALUES","IS_16_BIT_VALUES","IS_32_BIT_VALUES","IS_32_BIT_FLOAT","IS_64_BIT_FLOAT","TRANSFORM_DELTA","TRANSFORM_DELTA_DELTA","TRANSFORM_RLE","TRANSFORM_STRING","calcNumberPrecision","a","isFinite","e","p","Math","round","calculateStats","values","unique","Set","size","min","max","maxDecimals","p02","p05","p50","p95","p98","percentile","i","length","element","count","appendSingleItems","startIndex","endIndexInclusive","valueSize","itemCount","countBitSize","flags","buff","Buffer","allocUnsafe","valueSizeToBitSize","writeUint8","writeUInt8","writeUInt16LE","writeUInt32LE","offset","writeInt8","writeInt16LE","writeInt32LE","writeFloatLE","writeDoubleLE","Error","toString","appendRepeatedItems","value","calculateValueSizeFlag","sizeBit","calculateUnsignedBitSize","runLengthEncode","buffers","Uint8Array","push","isNextSame","rangeStartIndex","bitSizeFlag","concated","concat","buffer","byteOffset","byteLength","abs","fround","deltaEncode","result","lastValue","delta","compressSerie","serie","type","compressNumberSerie","compressStringSerie","findSmallest","deltaValues","deltaRle","delta2Values","delta2Rle","rle","data","transforms","stats","valueOffset","floor","offseted","map","f","smallest","headerData","final","set","_serie","float32Array","Float32Array","uInt8Float32Array","float64Array","Float64Array","uInt8Float64Array","runLengthDecodeGenerator","startOffset","endIndex","flag","countBits","val","v2","runLengthDecode","readHeader","rawData","headerSize","deltaDecodeGenerator","decompressSerieGenerator","header","decompressStringSerie","decompressNumberSerieGenerator","delta1","delta2"],"mappings":"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"}